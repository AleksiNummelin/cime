#!/usr/bin/env python2
"""
 This script compares xml files

"""
import glob
from standard_script_setup import *
from CIME.utils import expect
from CIME.XML.env_build import EnvBuild
from CIME.XML.env_case import EnvCase
from CIME.XML.env_mach_pes import EnvMachPes

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n%s [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# check_lockedfiles SMS\033[0m
    > %s
""" % ((os.path.basename(args[0]), ) * 4),

        description=description,

        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    return args.caseroot

def check_lockedfiles(caseroot):
    lockedfiles = glob.glob(os.path.join(caseroot, "LockedFiles", "*.xml"))
    for lfile in lockedfiles:
        fpart = os.path.basename(lfile)
        cfile = os.path.join(caseroot, fpart)
        if os.path.isfile(cfile):
            objname = fpart.split('.')[0]
            logging.info("Checking file %s"%objname)
            if objname == "env_build":
                f1obj = EnvBuild(caseroot, cfile)
                f2obj = EnvBuild(caseroot, lfile)
            elif objname == "env_mach_pes":
                f1obj = EnvMachPes(caseroot, cfile)
                f2obj = EnvMachPes(caseroot, lfile)
            elif objname == "env_case":
                f1obj = EnvCase(caseroot, cfile)
                f2obj = EnvCase(caseroot, lfile)

            diffs = f1obj.compare_xml(f2obj)
            if diffs:
                logging.warn("File %s has been modified"%lfile)
                for key in diffs.keys():
                    print("  found difference in %s : case %s locked %s" %
                          (key, diffs[key][0], diffs[key][1]))
                if objname == "env_mach_pes":
                    expect(False, "Invoke case.setup -clean followed by case.setup")
                if objname == "env_case":
                    expect(False, "Cannot change file env_case.xml, please"
                           " recover the original copy from LockedFiles")
                if objname == "env_build":
                    logging.warn("Setting build complete to False")
                    f1obj.set_value("BUILD_COMPLETE", "FALSE")
                    if "PIO_VERSION" in diffs.keys():
                        f1obj.set_value("BUILD_STATUS", "2")
                        f1obj.write()
                        logging.critical("Changing PIO_VERSION requires running "
                                         "case.clean_build all and rebuilding")
                    else:
                        f1obj.set_value("BUILD_STATUS", "1")
                        f1obj.write()



def _main_func(description):
    if "--test" in sys.argv:
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    caseroot = parse_command_line(sys.argv, description)

    check_lockedfiles(caseroot)

if __name__ == "__main__":
    _main_func(__doc__)
