#!/usr/bin/env python

"""
"""

from standard_script_setup import *

from CIME.utils             import expect
from CIME.XML.files             import Files
from CIME.XML.compsets    import Compsets
import argparse

logger = logging.getLogger(__name__)
###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument('--component',
                        help="Specify component of interest\n"
                        "If not specified, apply to all components.")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args

###############################################################################
def _main_func(description):
###############################################################################
    args = parse_command_line(sys.argv, description)

    files = Files()

    comp_classes = ("CPL", "ATM", "ROF", "GLC", "LND", "OCN", "WAV", "ICE", "ESP")
    components = ["allactive"]
    for comp in comp_classes:
        components.extend(files.get_components("COMP_ROOT_DIR_{}".format(comp)))
    compset_files = []
    compset_dict = {}
    for comp in components:
        compset_file = files.get_value("COMPSETS_SPEC_FILE", attribute={"component":comp})
        if compset_file not in compset_files:
            expect(os.path.isfile(compset_file), "Could not find file {}".format(compset_file))
            compset_files.append(compset_file)
            compset = Compsets(infile=compset_file, files=files)
            longnames = compset.get_compset_longnames()
            for longname in longnames:
                _, alias, science_support = compset.get_compset_match(name=longname)
                elements = longname.split("_")
                numelems = len(elements)
                expect(numelems > 7, "This longname not supported {}".format(longname))
                compset_dict[longname] = {"alias" : alias, "science_support_grids": science_support,
                                          "defined_by": comp, "init_opt":elements[0], "atm_opt" : elements[1],
                                          "lnd_opt": elements[2], "seaice_opt": elements[3], "ocn_opt":elements[4],
                                          "rof_opt": elements[5], "glc_opt": elements[6], "wav_opt": elements[7]}

                for i in range(8, numelems):
                    if elements[i].startswith("BGC"):
                        compset_dict[longname].update({"bgc_opt":elements[i]})
                    elif 'ESP' in elements[i]:
                        compset_dict[longname].update({"esp_opt":elements[i]})
                    elif elements[i] == 'TEST':
                        logger.info("Longname is {}".format(longname))
                    else:
                        logger.warn("Unrecognized longname: {} {} {} ".format(longname, i, elements[i]))

    print ("compset_dict = {}".format(compset_dict))


if (__name__ == "__main__"):
    _main_func(__doc__)
