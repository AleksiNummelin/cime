#!/usr/bin/env python

"""
case.setup - create the $caseroot/case.run script and user_nl_xxx component namelist mod files
"""

from standard_script_setup import *

from CIME.case_setup import case_setup
from CIME.case       import Case
from CIME.utils      import get_model

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [<casedir>] [--verbose] [--clean] [--reset]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Setup case \033[0m
    > {0}
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to setup")

    parser.add_argument("-c", "--clean", action="store_true",
                        help="Removes the batch run script for target machine."
                        "If the testmode argument is present then keep the test "
                        "script if it is present - otherwise remove it. "
                        "The user_nl_xxx and Macros files are never removed by case.setup - "
                        "you must remove them manually")

    parser.add_argument("-t", "--test-mode", action="store_true",
                        help="Keeps the test script when the --clean argument is used")

    parser.add_argument("-r", "--reset", action="store_true",
                        help="Does a clean followed by setup")

    if get_model() == "e3sm":
        parser.add_argument("--shell-batch", action="store_true",
                            help="Generate a shell implementation of case.run batch script")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    shell_batch = args.shell_batch if get_model() == "e3sm" else False

    return args.caseroot, args.clean, args.test_mode, args.reset, shell_batch

###############################################################################
def _main_func(description):
###############################################################################
    caseroot, clean, test_mode, reset, shell_batch = parse_command_line(sys.argv, description)
    with Case(caseroot, read_only=False) as case:
        case_setup(case, clean=clean, test_mode=test_mode, reset=reset, shell_batch=shell_batch)

if __name__ == "__main__":
    _main_func(__doc__)
