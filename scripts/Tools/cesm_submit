#!/usr/bin/env perl 

use strict;
use XML::LibXML;
use Getopt::Long;

my $xml = XML::LibXML->new( no_blanks => 1)->parse_file("env_case.xml"); 
my @nodes = $xml->findnodes(".//entry[\@id=\"CIMEROOT\"]"); 
my $cimeroot = $nodes[0]->getAttribute('value');
my %opts=();
$ENV{CIMEROOT}=$cimeroot;
unshift @INC, "$cimeroot/utils/perl5lib";

require Batch::BatchUtils;
require Module::ModuleLoader;
my %config;

# Get options, if any..
sub opts()
{
    GetOptions( "resubmit" => \$opts{'resubmit'},
                "scriptname=s"  => \$opts{'scriptname'});

}


sub main
{
    &opts();

    my $machine	= `./xmlquery -value MACH`;
    my $machroot	=  `./xmlquery -value CCSM_MACHDIR`;
    my $compiler	=  `./xmlquery -value COMPILER`;
    my $mpilib	=  `./xmlquery -value MPILIB`;
    my $caseroot	=  `./xmlquery -value CASEROOT`;
    my $case	=  `./xmlquery -value CASE`;
    my $debug       = `./xmlquery -value DEBUG`;
    my $scriptsroot       = `./xmlquery -value SCRIPTSROOT`;
    my $testcase       = `./xmlquery -value TESTCASE`;
    $config{DOUT_S}    = `./xmlquery -value DOUT_S`;
    $config{CASE} = $case;
    $config{BATCHSUBMIT} = `./xmlquery -value BATCHSUBMIT`;
    $config{BATCHQUERY} = `./xmlquery -value BATCHQUERY`;
    $config{BATCHREDIRECT} = `./xmlquery -value BATCHREDIRECT`;
    $config{TESTCASE} = `./xmlquery -value TESTCASE`;
    $config{CASEROOT} = `./xmlquery -value CASEROOT`;
    $config{COMP_RUN_BARRIERS} = `./xmlquery -value COMP_RUN_BARRIERS`;
    $config{RESUBMIT} = `./xmlquery -value RESUBMIT`;


    # Check the case only once..
    if(!$opts{resubmit}){
	print "checking the case..\n";
	qx(./check_case);
	if($?)
	{
	    die( "check_case failed");
	    exit(-1);
	}
    }

    my $moduleloader = Module::ModuleLoader->new(machine  => $machine, 
						 compiler => $compiler, 
						 mpilib   => $mpilib, 
						 debug    => $debug, 
						 caseroot => $caseroot, 
						 cimeroot => $cimeroot,
						 scriptsroot => $scriptsroot,
						 
						 );


    $moduleloader->loadModules();



    my $job;
    if(defined $testcase){
	$job = "test";
    }else{
	$job = "run";
    }


    my $batchutils = Batch::BatchUtilsFactory::getBatchUtils( case	   => $case, 
							      caseconfig   =>\%config,
							      caseroot	   => $caseroot, 
							      cimeroot	   => $cimeroot, 
							      compiler	   => $compiler, 
							      machine	   => $machine, 
							      machroot	   => $machroot, 
							      mpilib	   => $mpilib,
	                                                      job                => $job); 
    
    
    if(defined $opts{'resubmit'})
    {
        if(! defined $opts{'scriptname'})
        {
            die (" resubmit option given without scriptname provided, aborting!");
        }
        else
        {
            `./xmlchange RUN_WITH_SUBMIT=TRUE`;
            $config{RUN_WITH_SUBMIT}='TRUE';
            $batchutils->doResubmit($opts{'scriptname'});
        }
    }
    else
    {
        $batchutils->dependencyCheck();
#        check_DA_settings();
        `./xmlchange RUN_WITH_SUBMIT=TRUE`;
	$config{RUN_WITH_SUBMIT}='TRUE';
        $batchutils->submitJobs();
    }

}



sub doResubmit()
{
    my $scriptname = shift;
    my $job;
# This gets the extension (everything after the last . ) in $scriptname
    $scriptname =~ /\.([^\.]+)$/;
    $job = $1;
    my $batchutils = Batch::BatchUtilsFactory::getBatchUtils( case => $config{'CASE'},
                                                              caseconfig => \%config,
                                                              cimeroot => $config{'CIMEROOT'},
                                                              compiler => $config{'COMPILER'},
                                                              machine =>  $config{'MACH'},
                                                              machroot => $config{'CCSM_MACHDIR'},
                                                              mpilib   => $config{'MPILIB'},
	                                                     job => $job);
    print "Submitting $scriptname\n";    
    $batchutils->doResubmit($scriptname);
}

main(@ARGV) ;
