README.pyCECT
=============
CESM Ensemble Consistency Test
------------------------------
This package is used to compare the results of a set of new CAM simulations against the
accepted ensemble.  A summary file generated by pyEnsSum.py is needed (see README.pyEnsSum).

:AUTHORS: Haiying Xu, Allison Baker
:VERSION: 1.1.0
:COPYRIGHT: See the document entitled LICENSE.txt

Send questions and comments to Haiying Xu (haiyingx@ucar.edu).


Overview
--------
This package includes:

       pyCECT.py
                            A script which compares the new CAM tests to the 
                            accepted ensemble and indicates the number of principal 
			    components failures and (optionally) RMSZ scores and global means.
			    An overall "pass" or "fail" is issued.
   
       pyEnsLib.py 
                            Library python script used by pyCECT.py


Before you start to use the package, you need to load the following modules:

       - module load python
       - module load numpy
       - module load scipy
       - module load pynio

To see all options (and defaults):

       python pyCECT.py -h

Notes:

     	If the indir contains more files than the number (num) specified by "--numRunFile <num>" 
	(default= 3), then num files will be chosen at random from that directory.


Examples for generating consistency results:
--------------------------------------------
       (A)  Using the default pass/fail criteria (ie. sigMul, minPCFail, minRunFail, 
       numRunFile, and nPC) and the summary file generated by pyEnsSum.py:

	    -sumfile  ens.summary.nc

	    and specifying the directory path that contains the runs to be evaluated:
	    
	    -indir  /glade/u/tdd/asap/verification/cesm1_3_beta11/mira
       	    
	    yields the following command:

	    python pyCECT.py --sumfile  ens.summary.nc --indir  /glade/u/tdd/asap/verification/cesm1_3_beta11/mira 

       (B) Using the pop criteria and the summary file generated by pyEnsSumPop.py:
      
            --sumfile /glade/u/tdd/asap/pop_verification/ens_sum/pop.40ens.openseas.nc

	    and specifying the directory path that contains the runs to be evaluated:
	    
	    -indir /glade/u/tdd/asap/pop_verification/testcases/

            specifying the search patterns of the testcase file to get from the input directory above:

            --input_glob cvtd100000.0.pop.h.0003
           
            enable the popens option:

            --popens 
         
            specifying the json file that includes the variables which will be run the test on:

            --jsonfile pop_ensemble.json

            specifying test tolerance

            --pop_tol 3.0

            specifying pop threshold
 
            --pop_threshold 0.9

            enable printVarTest option:

            --printVarTest

            python pyCECT.py --sumfile /glade/u/tdd/asap/pop_verification/ens_sum/pop.40ens.openseas.nc --indir /glade/u/tdd/asap/pop_verification/testcases/ --input_glob cvtd100000.0.pop.h.0003 --popens --jsonfile pop_ensemble.json --outfile /glade/scratch/haiyingx/testcase.result --test_failure --pop_tol 3.0 --pop_threshold 0.9 --printVarTest
       	    
