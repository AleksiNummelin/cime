#!/usr/bin/env python

"""
Set NUOPC run sequence
"""
import os, sys, re

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *

from CIME.utils import run_cmd_no_fail, expect
from CIME.utils import run_cmd
from CIME.case import Case
from CIME.buildnml import parse_input

import glob, shutil
logger = logging.getLogger(__name__)

###############################################################################
def buildrunseq(case):
###############################################################################


    rundir = case.get_value("RUNDIR")
    caseroot = case.get_value("CASEROOT")
    user_file = os.path.join(caseroot, "nuopc.runseq")

    if os.path.exists(user_file):

        #--------------------------------
        # Determine if there is a user run sequence file in CASEROOT, use it
        #--------------------------------
        
        shutil.copy(os.path.join(user_file, rundir))
        shutil.copy(os.path.join(user_file, os.path.join(caseroot,"CaseDocs")))

    else:

        #--------------------------------
        # Set needed case variables
        #--------------------------------

        cimeroot = case.get_value("CIMEROOT")
        comp_atm = case.get_value("COMP_ATM")
        comp_ice = case.get_value("COMP_ICE")
        comp_glc = case.get_value("COMP_GLC")
        comp_lnd = case.get_value("COMP_LND")
        comp_ocn = case.get_value("COMP_OCN")
        comp_rof = case.get_value("COMP_ROF")
        comp_wav = case.get_value("COMP_WAV")

        #--------------------------------
        # Determine component coupling frequences 
        #--------------------------------

        ncpl_base_period  = case.get_value('NCPL_BASE_PERIOD')
        if ncpl_base_period == 'hour':
            basedt = 3600
        elif ncpl_base_period == 'day':
            basedt = 3600 * 24
        elif ncpl_base_period == 'year':
            if case.get_value('CALENDAR') == 'NO_LEAP':
                basedt = 3600 * 24 * 365
            else:
                expect(False, "Invalid CALENDAR for NCPL_BASE_PERIOD %s " %ncpl_base_period)
        elif ncpl_base_period == 'decade':
            if case.get_value('CALENDAR') == 'NO_LEAP':
                basedt = 3600 * 24 * 365 * 10
            else:
                expect(False, "invalid NCPL_BASE_PERIOD NCPL_BASE_PERIOD %s " %ncpl_base_period)
        else:
            expect(False, "invalid NCPL_BASE_PERIOD NCPL_BASE_PERIOD %s " %ncpl_base_period)

        if basedt < 0:
            expect(False, "basedt invalid overflow for NCPL_BASE_PERIOD %s " %ncpl_base_period)

        comps = case.get_values("COMP_CLASSES")
        coupling_times = {}
        mindt = basedt
        for comp in comps:
            ncpl = case.get_value(comp.upper() + '_NCPL')
            if ncpl is not None:
                cpl_dt = basedt / int(ncpl)
                totaldt = cpl_dt * int(ncpl)
                if totaldt != basedt:
                    expect(False, " %s ncpl doesn't divide base dt evenly" %comp)
                coupling_times[comp.lower() + '_cpl_dt'] = cpl_dt
                mindt = min(mindt, cpl_dt)

        if comp_atm is not None and comp_atm not in('datm', 'xatm', 'satm'):
            atmdt = int(basedt / case.get_value('ATM_NCPL'))
            expect(atmdt == mindt, 'Active atm should match shortest model timestep atmdt={} mindt={}'
                   .format(atmdt, mindt))

        #--------------------------------
        # Determine run sequence files
        #--------------------------------
        input_dir = os.path.join(os.path.join(cimeroot,"src","drivers","nuopc","cime_config"))

        if (comp_atm == 'datm' and comp_ocn == "docn" and comp_ice == 'dice' and comp_rof == 'drof'):
            # for A compsets
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_A')

        elif (comp_atm == 'xatm' and comp_ocn == "xocn" and comp_ice == 'xice' and comp_rof == 'xrof'):
            # for X compsets
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_X')

        elif (comp_atm == 'cam' and comp_lnd == 'clm' and comp_ocn == "docn"):
            # for F compsets
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_F')

        elif (comp_atm == 'cam' and comp_lnd == 'slnd' and comp_ice == 'sice' and comp_ocn == "docn"):
            # for Q (aquaplanet) compsets
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_Q')

        elif ( (comp_atm == 'datm' and comp_ocn == "mom"  and comp_ice == "dice") or 
               (comp_atm == 'datm' and comp_ocn == "mom"  and comp_ice == "cice") or
               (comp_atm == 'datm' and comp_ocn == "docn" and comp_ice == "cice")):
            # for C, G and D compsets
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_C_G_D')

        elif (comp_atm == 'datm' and comp_lnd == "clm"):
            # for I compsets
            if (comp_rof == 'srof' and comp_glc == "sglc"):
                runseq_input = os.path.join(input_dir, 'nuopc_runseq_I')
            elif (comp_rof == 'mosart' and comp_glc == "sglc"):
                runseq_input = os.path.join(input_dir, 'nuopc_runseq_I_mosart')
            elif (comp_rof == 'mosart' and comp_glc == "glc"):
                runseq_input = os.path.join(input_dir, 'nuopc_runseq_I_mosart_cism')

        elif (comp_atm == 'cam' and comp_lnd == "clm" and comp_ocn == 'mom'):
            # for CESM fully coupled 
            if (comp_rof == 'srof' and comp_glc == "sglc"):
                runseq_input = os.path.join(input_dir, 'nuopc_runseq_B')

        elif (comp_atm == 'fv3gfs' and comp_ocn == "mom6" and comp_ice == 'cice'):
            # for NEMS fully coupled 
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_NEMS')

        else:
            # default
            runseq_input = os.path.join(input_dir, 'nuopc_runseq_default')

        file_input = open(runseq_input, "r")

        #--------------------------------
        # Write output run sequence file
        #--------------------------------

        runseq_output = os.path.join(caseroot, 'CaseDocs', 'nuopc.runseq')
        file_output = open(runseq_output, "w")

        for line in file_input.readlines():
            for key, value in coupling_times.items():
                if key in line:
                    line = line.replace(key, str(value))
            file_output.write(line)
        file_output.close()

        # copy the file to rundir
        shutil.copy(runseq_output, rundir)


###############################################################################

def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildrunseq(case)
    logger.info("building run sequence")

if __name__ == "__main__":
    _main_func()
